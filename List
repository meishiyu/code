#include<iostream> 
#include<string> 
#include<iomanip> 
#include<fstream> 
using namespace std; 
#define OK 1 
#define ERROR 0 
#define OVERFLOW -2 
typedef int Status; //Status 是函数返回值类型，其值是函数结果状态代码。 
typedef int ElemType; //ElemType 为可定义的数据类型，此设为int类型 
struct Student 
{ 
	string num;//学号 
	string name;//姓名 
	double price;//成绩 

}; 
typedef struct LNode 
{ 
    Student data; //结点的数据域 
    struct LNode *next; //结点的指针域 

} LNode, *LinkList; //LinkList为指向结构体LNode的指针类型 
string head_1, head_2, head_3;//文件中的标题（第一行） 
int length;
//主函数
int main(){
	int a,choose;
	Student e;
	string name;
	LinkList L;
	//函数
	int reList(LinkList&L);             //初始化链表 
	void creList_h(LinkList&L);   //前插法构建链表
	void creList_r(LinkList&L);   //后插法构建链表
	int showList(LinkList&L);            //显示链表内容 
	int serList(LinkList&L,string h);    //查找学生信息
	void getList(LinkList&L,int i);  //获取学生信息
	int sertList(LinkList&L,Student &e,int i);  //插入学生信息
	int deList(LinkList&L,int i);        //删除学生信息
	int lenList(LinkList&L);             //显示链表长度
	int desList(LinkList&L);            //销毁链表
	choose =-1;
	while (choose!=0){
	cout<<"....................."<<endl;
	cout<<"1.初始化链表"<<endl; 
	cout<<"2.前插法构建链表"<<endl;
	cout<<"3,后插法构建链表"<<endl; 
	cout<<"4.显示链表长度"<<endl;
	cout<<"5.查找学生信息"<<endl;
	cout<<"6.显示链表内容"<<endl; 
   	cout<<"7.获取学生信息"<<endl;
   	cout<<"8.插入学生信息"<<endl;
   	cout<<"9.删除学生信息"<<endl;
    cout<<"10.销毁链表 ："<<endl;
	cout<<"0.退出" <<endl;
	cout<<"....................."<<endl;
	cout<<"请选择"<<endl; 
	cin>>choose;
		switch (choose){
			case 1:
			   if(reList(L))
			   cout<<"成功建立链表"<<endl;             //初始化链表 
               break; 
			break;
			case 2:
				creList_h(L);   //前插法构建链表
				cout<<"输入Student.txt信息完毕"<<endl;
				break;
			case 3:  
				creList_r(L);   //后插法构建链表
				cout<<"输入Student.txt信息完毕"<<endl;
				break;
			case 4:
				cout<<"链表长度为"<<endl;
				cout<<lenList(L)<<endl;
				break;
			case 6:
				cout<<"即将显示链表内容"<<endl; 
			    showList(L);            //显示链表内容 
				break;
			case 5:
				cout<<"输入你要找的学生姓名"<<endl;
				cin>>name; 
			    serList(L,name);    //查找学生信息
				break;
			case 7:
				cout<<"输入一个位置"<<endl;
				cin>>a;
				getList(L,a);
				break;
			case 8:
				cout<<"输入插入的位置，学生信息"<<endl;
				cin>>a;
				cin>>e.num>>e.name>>e.price; 
				sertList(L,e,a);
				break;
			case 9:
				cout<<"请输入删除学生编号"<<endl;
				cin>>a; 
				deList(L,a);
				break;
			case 10:
				if( desList(L)){
					cout<<"成功销毁链表"<<endl;
				}
				break;		
		}
 
}


} 
int reList(LinkList&L){     //初始化链表
	L= new LNode;
	L->next=NULL;
	return OK;
}               
void creList_r(LinkList&L){
	LinkList p,r;
	r=L;
	length=0;
	fstream file;
	file.open("Student.txt");
	if(!file){
		cout<<""<<endl;
		
	}
	file>>head_1>>head_2>>head_3;
	while(!file.eof()){
		p= new LNode;
		file>>p->data.num>>p->data.name>>p->data.price;
		p->next=NULL;
		r->next=p;
		r=p;
		length++;
	}
	file.close();
}   //后插法构建链表

void creList_h(LinkList&L){
	LinkList p,r;
	r=L;
	length=0;
	fstream file;
	file.open("Student.txt");
	if(!file){
		cout<<""<<endl;
		
	}
	file>>head_1>>head_2>>head_3;
	while(!file.eof()){
		p= new LNode;
		file>>p->data.num>>p->data.name>>p->data.price;
		p->next=r->next;
		r->next=p;
		length++;
	}
	file.close();
}   //前插法构建链表

int showList(LinkList&L){
	LinkList p;
	p=L->next;
	for(int i=0;i<length;i++){
		cout<<"学号"<<p->data.num<<"  姓名"<<p->data.name<<"  成绩"<<p->data.price<<endl;
		p=p->next;
	}
}           //显示链表内容 

int serList(LinkList&L,string h){
	LinkList p;
	p=L->next;
	for(int i=0;i<length;i++){
		if(h==p->data.name) {
		cout<<"学号"<<p->data.num<<"  姓名"<<p->data.name<<"  成绩"<<p->data.price<<endl;
		return 0;
		}
		p=p->next;
	}
	
}    //查找学生信息
int lenList(LinkList&L){
	return length;
}             //显示链表长度

int desList(LinkList&L){
	L->next=NULL;
	return OK; 
}            //销毁链表
int sertList(LinkList&L,Student &e,int i){
	LinkList p,r;
	p=L;
	int j=0;
	while(p&&j<i-1){
		p=p->next;j++;
	}
	if(!p||j>i-1){
		return ERROR;
	}
	r=new LNode;
	r->data.num=e.num;
	r->data.name=e.name;
	r->data.price=e.price;
	r->next=p->next;
	p->next=r;
	length ++;
	return OK;
}  //插入学生信息
int deList(LinkList&L,int i){
    LinkList p,r;
    p=L->next;
	for(int m=0;m<i-1;m++){
		p=p->next;
	} 
	r=p->next;
	p->next=r->next;
	delete r;
	length --;
	return OK;
}        //删除学生信息
void getList(LinkList&L,int m){
	LinkList p;
	p=L->next;
	for(int i=0;i<m-1;i++){
		p=p->next;
	}
	cout<<"学号"<<p->data.num<<"姓名"<<p->data.name<<"成绩"<<p->data.price<<endl;
}  //获取学生信息
















